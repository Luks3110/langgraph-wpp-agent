import { StringOutputParser } from "@langchain/core/output_parsers";
import {
    ChatPromptTemplate,
    MessagesPlaceholder
} from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { AgentRequestMessage } from "@products-monorepo/shared";
import { queueClient } from "../clients/queue.js";
import { GOOGLE_GENERATIVE_AI_API_KEY } from "../config/env.js";
import { AgentState } from "./types.js";

// Initialize Google Generative AI model
const model = new ChatGoogleGenerativeAI({
    apiKey: GOOGLE_GENERATIVE_AI_API_KEY,
    modelName: "gemini-2.0-flash"
});

/**
 * Create message classification prompt template
 */
function createMessageClassifierPrompt() {
    return ChatPromptTemplate.fromMessages([
        [
            "system",
            `Voc√™ √© um classificador de mensagens do WhatsApp para o servi√ßo "Ess√™ncia do Vale".

Sua tarefa √© analisar a mensagem recebida e determinar qual a√ß√£o deve ser tomada:

1. Se a mensagem for uma sauda√ß√£o simples como "Ol√°", "Oi", "Bom dia", responda com uma sauda√ß√£o amig√°vel.
2. Se a mensagem for uma pergunta sobre produtos, cat√°logo ou compras, classifique para ser enviada ao agente de produtos.
3. Se for uma pergunta sobre atendimento, hor√°rios, pol√≠tica de entrega, etc., forne√ßa informa√ß√µes b√°sicas de atendimento.

Responda APENAS com uma das seguintes categorias:
- GREETING: Se for apenas uma sauda√ß√£o
- PRODUCT_QUERY: Se for sobre produtos, pre√ßos, cat√°logo ou compras
- CUSTOMER_SERVICE: Se for sobre atendimento, hor√°rios, localiza√ß√£o, entrega, etc.`
        ],
        ["human", "{input}"]
    ]);
}

/**
 * Create a prompt template for greeting responses
 */
function createGreetingPrompt() {
    return ChatPromptTemplate.fromMessages([
        [
            "system",
            `Voc√™ √© um assistente virtual da Ess√™ncia do Vale, uma loja de produtos artesanais.

Sua tarefa √© responder a sauda√ß√µes com mensagens amig√°veis e acolhedoras, incentivando o cliente a conhecer os produtos.

Diretrizes:
1. Mantenha a resposta breve e amig√°vel
2. Mencione que voc√™ √© um assistente virtual da Ess√™ncia do Vale
3. Pergunte como pode ajudar o cliente, sugerindo que ele pode perguntar sobre produtos
4. Use emojis relevantes para tornar a mensagem mais acolhedora

Exemplo de resposta:
"Ol√°! üëã Sou o assistente virtual da Ess√™ncia do Vale. Como posso ajudar voc√™ hoje? Voc√™ pode me perguntar sobre nossos produtos artesanais! üåø"

Personalize a resposta com base na sauda√ß√£o do cliente (bom dia, boa tarde, etc.).`
        ],
        ["human", "{input}"]
    ]);
}

/**
 * Create a prompt template for customer service responses
 */
function createCustomerServicePrompt() {
    return ChatPromptTemplate.fromMessages([
        [
            "system",
            `Voc√™ √© um assistente virtual da Ess√™ncia do Vale, focado em atendimento ao cliente.

Responda a perguntas sobre hor√°rios, localiza√ß√£o, pol√≠tica de entrega, formas de pagamento, etc.

Informa√ß√µes dispon√≠veis:
- Hor√°rio de atendimento: Segunda a Sexta, 9h √†s 18h; S√°bado, 9h √†s 13h
- Endere√ßo: Rua das Flores, 123, Centro, S√£o Paulo - SP
- Tempo de entrega: 3-5 dias √∫teis para capitais, 5-10 dias para interior
- Formas de pagamento: Cart√£o de cr√©dito, PIX, boleto banc√°rio
- Trocas e devolu√ß√µes: At√© 7 dias ap√≥s recebimento

Diretrizes:
1. Seja sempre cordial e respeitoso
2. Forne√ßa informa√ß√µes precisas usando os dados acima
3. Use emojis ocasionalmente para tornar a mensagem mais amig√°vel
4. Se n√£o souber alguma informa√ß√£o espec√≠fica, oriente a enviar um email para contato@essenciadovale.com.br
5. Termine oferecendo ajuda adicional

Mantenha suas respostas concisas mas completas, n√£o ultrapassando 3-4 linhas de texto.`
        ],
        // Chat history comes after the system message
        new MessagesPlaceholder("chat_history"),
        // User input is last
        ["human", "{input}"]
    ]);
}

/**
 * Process the incoming message and determine the action type
 */
export async function processMessage(state: AgentState): Promise<AgentState> {
    try {
        // Create the message classifier prompt
        const classifierPrompt = createMessageClassifierPrompt();

        // Create the chain
        const chain = RunnableSequence.from([
            classifierPrompt,
            model,
            new StringOutputParser()
        ]);

        // Classify the message
        const classification = await chain.invoke({
            input: state.input
        });

        console.log(`Message classification: "${classification}"`);

        // Determine if we should forward this to the products agent
        const shouldForwardToProducts = classification.trim() === "PRODUCT_QUERY";
        const actionType = classification.trim();

        // Return state with classification
        return {
            ...state,
            shouldForwardToProducts,
            actionType
        };
    } catch (error) {
        console.error("Error processing message:", error);
        return {
            ...state,
            error: error instanceof Error ? error : new Error(String(error))
        };
    }
}

/**
 * Generate a direct response for greetings and customer service inquiries
 */
export async function generateResponse(state: AgentState): Promise<AgentState> {
    try {
        if (state.actionType === "GREETING") {
            // Create the greeting prompt
            const greetingPrompt = createGreetingPrompt();

            // Create the chain
            const chain = RunnableSequence.from([
                greetingPrompt,
                model,
                new StringOutputParser()
            ]);

            // Generate greeting response
            const response = await chain.invoke({
                input: state.input
            });

            return {
                ...state,
                response
            };
        } else if (state.actionType === "CUSTOMER_SERVICE") {
            // Format chat history
            const chatHistory = state.chatHistory || [];

            // Create the customer service prompt
            const customerServicePrompt = createCustomerServicePrompt();

            // Create the chain
            const chain = RunnableSequence.from([
                customerServicePrompt,
                model,
                new StringOutputParser()
            ]);

            // Generate customer service response
            const response = await chain.invoke({
                chat_history: chatHistory,
                input: state.input
            });

            return {
                ...state,
                response
            };
        }

        // If none of the conditions match, return the state unchanged
        return state;
    } catch (error) {
        console.error("Error generating response:", error);
        return {
            ...state,
            error: error instanceof Error ? error : new Error(String(error))
        };
    }
}

/**
 * Forward message to the products agent
 */
export async function forwardToProductsAgent(state: AgentState): Promise<AgentState> {
    try {
        console.log(`Forwarding message from ${state.userId} to products agent`);

        // Prepare message for the products agent
        const message: AgentRequestMessage = {
            from: state.userId,
            text: state.input,
            timestamp: Date.now(),
            messageId: state.messageId || `whatsapp-${Date.now()}`
        };

        // Forward message to products agent via queue
        await queueClient.sendMessageToAgent(message);

        // Set response to indicate successful forwarding
        return {
            ...state,
            response: "Sua pergunta sobre produtos est√° sendo processada. Aguarde um momento, por favor."
        };
    } catch (error) {
        console.error("Error forwarding to products agent:", error);
        return {
            ...state,
            error: error instanceof Error ? error : new Error(String(error))
        };
    }
}

/**
 * Handle errors in the agent workflow
 */
export function handleError(state: AgentState): AgentState {
    console.error("WhatsApp agent encountered an error:", state.error);

    return {
        ...state,
        response:
            "Desculpe, estou enfrentando algumas dificuldades t√©cnicas no momento. Poderia tentar novamente mais tarde?"
    };
} 
