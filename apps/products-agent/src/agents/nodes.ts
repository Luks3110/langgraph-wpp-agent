import { StringOutputParser } from "@langchain/core/output_parsers";
import {
  ChatPromptTemplate,
  MessagesPlaceholder,
  SystemMessagePromptTemplate
} from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { character } from "../config/character.js";
import { GOOGLE_GENERATIVE_AI_API_KEY } from "../config/env.js";
import { QdrantAdapter } from "../database/qdrant.js";
import { AgentState, ChatMessage } from "./types.js";
import {
  DynamicRetrievalMode,
  GoogleSearchRetrievalTool
} from "@google/generative-ai";

const searchRetrievalTool: GoogleSearchRetrievalTool = {
  googleSearchRetrieval: {
    dynamicRetrievalConfig: {
      mode: DynamicRetrievalMode.MODE_DYNAMIC,
      dynamicThreshold: 0.7
    }
  }
};
const model = new ChatGoogleGenerativeAI({
  apiKey: GOOGLE_GENERATIVE_AI_API_KEY,
  modelName: "gemini-2.0-flash"
});

const searchRetrievalModel = new ChatGoogleGenerativeAI({
  apiKey: GOOGLE_GENERATIVE_AI_API_KEY,
  modelName: "gemini-2.0-flash"
}).bindTools([searchRetrievalTool]);

const qdrantAdapter = new QdrantAdapter();

/**
 * Create system prompt from character configuration
 */
function createSystemPrompt(): string {
  const { system, bio, style, topics, adjectives, lore } = character;

  return `
${system}

## Biografia
${bio.join("\n")}

## Estilo de Comunica√ß√£o
${style.all.map((s) => `- ${s}`).join("\n")}

## Estilo de Chat
${style.chat.map((s) => `- ${s}`).join("\n")}

## T√≥picos de Especialidade
${topics.map((t) => `- ${t}`).join("\n")}

## Caracter√≠sticas
${adjectives.map((a) => `- ${a}`).join("\n")}

## Informa√ß√µes Adicionais
${lore.map((l) => `- ${l}`).join("\n")}
`;
}

/**
 * Create the character-based prompt template
 */
function createPromptTemplate() {
  // Get base system prompt from character
  const basePrompt = createSystemPrompt();

  // Create the chat prompt template with system message first
  return ChatPromptTemplate.fromMessages([
    SystemMessagePromptTemplate.fromTemplate(`${basePrompt}

Informa√ß√µes relevantes do banco de dados:
{context}

Instru√ß√µes espec√≠ficas:
1. Voc√™ deve oferecer informa√ß√µes precisas e completas sobre os produtos mostrados acima.
2. Destaque caracter√≠sticas como pre√ßo, disponibilidade, desconto e detalhes espec√≠ficos dos produtos.
3. Se o usu√°rio fizer perguntas sobre produtos espec√≠ficos, responda diretamente com informa√ß√µes desses produtos.
4. Se houver v√°rios produtos semelhantes, compare-os para ajudar o cliente a escolher.
5. Inclua detalhes de pre√ßo, desconto e qualidade nas suas recomenda√ß√µes.
6. Se um produto estiver fora de estoque, informe claramente e sugira alternativas.
7. Na formata√ß√£o, para negrito use por exemplo: *negrito*
8. Use sempre emojis junto ao nome do produto, por exemplo: *üíª Notebook Gamer Acer Nitro 5*

O t√≥pico atual da conversa √©: {topic}
Pergunta atual do usu√°rio: {input}

Lembre-se de usar essas informa√ß√µes para responder √† pergunta do usu√°rio, mas mantenha seu estilo de comunica√ß√£o consistente com as instru√ß√µes acima.`),
    // Chat history comes after the system message
    new MessagesPlaceholder("chat_history"),
    // User input is last
    ["human", "{input}"]
  ]);
}

/**
 * Create a prompt template for FAQ responses
 */
function createFAQPromptTemplate() {
  // Get base system prompt from character
  const basePrompt = createSystemPrompt();

  // Create the chat prompt template with system message first
  return ChatPromptTemplate.fromMessages([
    SystemMessagePromptTemplate.fromTemplate(`${basePrompt}

Informa√ß√µes relevantes do banco de dados FAQ:
{faq_context}

Instru√ß√µes espec√≠ficas:
1. Voc√™ deve responder perguntas relacionadas √† empresa Ess√™ncia do Vale com base nas informa√ß√µes de FAQ acima.
2. Mantenha suas respostas amig√°veis, claras e diretas.
3. Use emojis relevantes para tornar a resposta mais acolhedora.
4. Se a pergunta do usu√°rio n√£o estiver completamente respondida com as informa√ß√µes do FAQ, mencione isso e ofere√ßa ajuda adicional.
5. Na formata√ß√£o, para negrito use por exemplo: *negrito*

Pergunta atual do usu√°rio: {input}

Lembre-se de usar essas informa√ß√µes para responder √† pergunta do usu√°rio, mas mantenha seu estilo de comunica√ß√£o consistente com as instru√ß√µes acima.`),
    // Chat history comes after the system message
    new MessagesPlaceholder("chat_history"),
    // User input is last
    ["human", "{input}"]
  ]);
}

/**
 * Create a prompt template for query improvement
 */
function createQueryImprovementPrompt() {
  return ChatPromptTemplate.fromMessages([
    [
      "system",
      `Voc√™ √© um especialista em melhorar consultas de pesquisa para um sistema de busca de produtos.

Sua tarefa √© transformar uma consulta de usu√°rio comum em uma consulta estruturada que retornar√° melhores resultados em uma pesquisa vetorial.

Diretrizes:
1. Identifique os tipos de produtos mencionados ou impl√≠citos na consulta
2. Adicione termos de produto espec√≠ficos (como marca, tipo, categoria)
3. Adicione atributos relevantes (como tamanho, cor, faixa de pre√ßo)
4. Remova palavras desnecess√°rias como "me mostre", "eu quero", etc.
5. Mantenha a consulta concisa e focada (m√°ximo 10 palavras)
6. Concentre-se em termos que provavelmente est√£o no banco de dados de produtos

Exemplos:
- "Quero ver celulares baratos" ‚Üí "smartphones pre√ßo baixo econ√¥micos"
- "Preciso de uma blusa para o trabalho" ‚Üí "camisa social formal escrit√≥rio"
- "Algo para dar de presente para minha namorada" ‚Üí "presentes femininos acess√≥rios joias"

Sempre retorne apenas a consulta melhorada, sem explica√ß√µes ou texto adicional.`
    ],
    ["human", "{input}"]
  ]);
}

/**
 * Create a prompt template for FAQ classification
 */
function createFAQClassifierPrompt() {
  return ChatPromptTemplate.fromMessages([
    [
      "system",
      `Voc√™ √© um classificador especializado em determinar se uma pergunta est√° relacionada a informa√ß√µes gerais da empresa Ess√™ncia do Vale ou se √© uma consulta de produto.

Sua tarefa √© analisar a pergunta do usu√°rio e determinar se ela est√° perguntando sobre:
1. Informa√ß√µes gerais da empresa (como hist√≥rico, pol√≠ticas, contato, entregas, pagamentos)
2. Perguntas frequentes (FAQ) sobre a empresa
3. Ou se est√° buscando informa√ß√µes sobre produtos espec√≠ficos
4. TUDO QUE TIVER ESSENCIA DO VALE √â FAQ
5. Perguntas sobre o que √© Ess√™ncia do Vale, sua hist√≥ria, sua miss√£o, seus valores, etc, s√£o FAQ.

Exemplos de perguntas sobre informa√ß√µes da empresa ou FAQ:
- "Como posso acompanhar meu pedido?"
- "Quais s√£o as formas de pagamento?"
- "Voc√™s entregam em todo o Brasil?"
- "Como posso cancelar meu pedido?"
- "Quem fundou a Ess√™ncia do Vale?"
- "Qual √© o prazo de entrega?"
- "Os produtos t√™m garantia?"
- "√â seguro comprar no site de voc√™s?"
- "O que √© a Ess√™ncia do Vale e por que preciso me cadastrar?"
- "Quem s√£o as pessoas que trabalham na Ess√™ncia do Vale?"
- "Qual √© a miss√£o da Ess√™ncia do Vale?"
- "Como a Ess√™ncia do Vale contribui para a comunidade?"
- "Quais s√£o os valores da Ess√™ncia do Vale?"
- "Como a Ess√™ncia do Vale √© diferente das outras marcas de produtos de beleza?"
- "Quais s√£o os diferenciais da Ess√™ncia do Vale?"
- "O que √© a Ess√™ncia do Vale?"
- "Quais s√£o os produtos da Ess√™ncia do Vale?"
- "Quais s√£o os servi√ßos da Ess√™ncia do Vale?"
- "Quais s√£o as pol√≠ticas da Ess√™ncia do Vale?"
- "Quais s√£o as formas de contato da Ess√™ncia do Vale?"
- "Quais s√£o as redes sociais da Ess√™ncia do Vale?"



Exemplos de perguntas sobre produtos:
- "Voc√™s t√™m doce de leite sem a√ß√∫car?"
- "Quanto custa a geleia de morango?"
- "Quais s√£o os ingredientes da geleia?"
- "Tem produtos sem a√ß√∫car?"
- "Voc√™s vendem compotas?"
- "Qual pat√™ √© mais vendido?"

Responda APENAS com "FAQ" se for uma pergunta relacionada a informa√ß√µes da empresa ou FAQ, ou "PRODUTO" se for uma pergunta sobre produtos.`
    ],
    ["human", "{input}"]
  ]);
}

/**
 * Improve the user query for better product search
 */
export async function improveQuery(state: AgentState): Promise<AgentState> {
  try {
    // Use the original query if short queries
    if (state.input.length < 5) {
      console.log("Query too short, using original:", state.input);
      return state;
    }

    // Check cache for similar query improvements first
    try {
      const cachedImprovement = await qdrantAdapter.findSimilarCachedQuery(
        state.input,
        "query_improvement"
      );

      if (cachedImprovement) {
        console.log(
          `üîç [Improve] Using cached query improvement (similarity: ${cachedImprovement.similarity.toFixed(2)})`
        );
        console.log(
          `Original: "${state.input}" ‚Üí Improved: "${cachedImprovement.response}"`
        );

        return {
          ...state,
          originalInput: state.input,
          input: cachedImprovement.response
        };
      }
    } catch (cacheError) {
      // If cache check fails, continue with normal improvement
      console.log("Cache check failed, falling back to LLM query improvement");
    }

    // Create the query improvement prompt
    const queryPrompt = createQueryImprovementPrompt();

    // Create the chain
    const chain = RunnableSequence.from([
      queryPrompt,
      model,
      new StringOutputParser()
    ]);

    // Generate improved query
    const improvedQuery = await chain.invoke({
      input: state.input
    });

    console.log(`Original query: "${state.input}"`);
    console.log(`Improved query: "${improvedQuery}"`);

    // Cache the query improvement
    await qdrantAdapter.cacheQueryResponse(
      state.input,
      improvedQuery,
      "query_improvement"
    );

    // Return state with improved query
    return {
      ...state,
      originalInput: state.input,
      input: improvedQuery
    };
  } catch (error) {
    console.error("Error improving query:", error);
    // If improvement fails, continue with original query
    return state;
  }
}

/**
 * Classify if the query is related to FAQ or products
 */
export async function classifyFAQQuery(state: AgentState): Promise<AgentState> {
  try {
    // Check if FAQ collection exists and has data
    const hasFAQData = await qdrantAdapter.hasFAQData();
    console.log("üöÄ ~ classifyFAQQuery ~ hasFAQData:", hasFAQData);
    if (!hasFAQData) {
      console.log("No FAQ data available, skipping FAQ classification");
      return {
        ...state,
        isFAQQuery: false
      };
    }

    // Create the FAQ classifier prompt
    const classifierPrompt = createFAQClassifierPrompt();

    // Create the chain
    const chain = RunnableSequence.from([
      classifierPrompt,
      model,
      new StringOutputParser()
    ]);

    // Classify the query
    const classification = await chain.invoke({
      input: state.input
    });
    console.log("üöÄ ~ classifyFAQQuery ~ classification:", classification);

    const isFAQQuery = classification.trim().toUpperCase() === "FAQ";
    console.log(`Query classification: "${classification}"`);
    console.log(`Is FAQ query: ${isFAQQuery}`);

    // Return state with classification
    return {
      ...state,
      isFAQQuery
    };
  } catch (error) {
    console.error("Error classifying query:", error);
    // If classification fails, assume it's not a FAQ query
    return {
      ...state,
      isFAQQuery: false
    };
  }
}

/**
 * Retrieve FAQ information for a query
 */
export async function retrieveFAQInformation(
  state: AgentState
): Promise<AgentState> {
  try {
    // Initialize Qdrant if needed
    if (!qdrantAdapter.isInitialized()) {
      await qdrantAdapter.initialize();
    }

    // Search for FAQ information
    const faqResults = await qdrantAdapter.searchFAQ(state.input);

    console.log(`Found ${faqResults.length} FAQ results`);

    return {
      ...state,
      faqResults
    };
  } catch (error) {
    console.error("Error retrieving FAQ information:", error);
    return {
      ...state,
      error: error instanceof Error ? error : new Error(String(error))
    };
  }
}

/**
 * Generate response for FAQ queries
 */
export async function generateFAQResponse(
  state: AgentState
): Promise<AgentState> {
  try {
    // Format chat history
    const chatHistory: ChatMessage[] = state.chatHistory || [];

    // Format the FAQ context
    const faqContext =
      state.faqResults
        ?.map((result) => {
          return `
Pergunta: ${result.question}
Resposta: ${result.answer}
(Relev√¢ncia: ${(result.similarity * 100).toFixed(1)}%)
`;
        })
        .join("\n\n") || "Nenhuma informa√ß√£o de FAQ encontrada.";

    // Create the prompt template
    const promptTemplate = createFAQPromptTemplate();

    // Create the chain
    const chain = RunnableSequence.from([
      promptTemplate,
      model,
      new StringOutputParser()
    ]);

    // Generate the response
    const response = await chain.invoke({
      chat_history: chatHistory,
      faq_context: faqContext,
      input: state.input
    });

    // Cache the response
    const originalQuery = state.originalInput || state.input;
    await qdrantAdapter.cacheQueryResponse(originalQuery, response);

    return {
      ...state,
      response
    };
  } catch (error) {
    console.error("Error generating FAQ response:", error);
    return {
      ...state,
      error: error instanceof Error ? error : new Error(String(error))
    };
  }
}

/**
 * Create the retrieval node
 */
export async function retrieveInformation(
  state: AgentState
): Promise<AgentState> {
  try {
    // Initialize Qdrant if needed
    if (!qdrantAdapter.isInitialized()) {
      await qdrantAdapter.initialize();
    }

    // Try to find a cached response for a similar query BEFORE doing search
    const originalQuery = state.originalInput || state.input;
    const cachedResult =
      await qdrantAdapter.findSimilarCachedQuery(originalQuery);

    if (cachedResult) {
      console.log(
        `üéØ [Retrieval] Using cached response (similarity: ${cachedResult.similarity.toFixed(2)}) for query: "${cachedResult.originalQuery}"`
      );
      return {
        ...state,
        documents: [], // No need to retrieve documents
        cachedResponse: cachedResult.response // Store cached response
      };
    }

    // Only search if no cache hit
    console.log("üí´ No cache hit, searching for relevant documents...");
    const documents = await qdrantAdapter.searchKnowledge({
      query: state.input,
      k: 5
    });

    return {
      ...state,
      documents
    };
  } catch (error) {
    console.error("Error retrieving information:", error);
    return {
      ...state,
      error: error instanceof Error ? error : new Error(String(error))
    };
  }
}

/**
 * Create the generation node
 */
export async function generateResponse(state: AgentState): Promise<AgentState> {
  try {
    // Initialize Qdrant if needed
    if (!(await qdrantAdapter.isInitialized())) {
      await qdrantAdapter.initialize();
    }

    // If we already have a cached response from retrieval, use it
    if (state.cachedResponse) {
      console.log("üéØ Using cached response from retrieval stage");
      return {
        ...state,
        response: state.cachedResponse
      };
    }

    // Format chat history
    const chatHistory: ChatMessage[] = state.chatHistory || [];

    // Format context from documents
    const context =
      state.documents
        ?.map((doc) => {
          // Extract product info from metadata
          const product = doc.metadata;
          if (!product) return "";

          // Format product details as readable text
          return `
Produto: ${product.title || ""}
Marca: ${product.brand || ""}
Categoria: ${product.category || ""} > ${product.sub_category || ""}
Pre√ßo original: R$ ${product.actual_price || "N/A"}
Pre√ßo promocional: R$ ${product.selling_price || "N/A"}
Desconto: ${product.discount || "Sem desconto"}
Avalia√ß√£o: ${product.average_rating || "Sem avalia√ß√£o"} estrelas
Disponibilidade: ${product.out_of_stock ? "Fora de estoque" : "Em estoque"}
${product.product_details ? `Detalhes: ${JSON.stringify(product.product_details)}` : ""}
ID: ${product.product_id || doc.id}
`;
        })
        .join("\n\n") || "Nenhuma informa√ß√£o relevante encontrada.";

    // Create prompt template
    const promptTemplate = createPromptTemplate();

    // Create the chain
    const chain = RunnableSequence.from([
      promptTemplate,
      model,
      new StringOutputParser()
    ]);

    // Generate response
    const response = await chain.invoke({
      chat_history: chatHistory,
      context,
      input: state.input,
      topic: "produtos"
    });

    // Cache the original query with the generated response
    const originalQuery = state.originalInput || state.input;
    await qdrantAdapter.cacheQueryResponse(originalQuery, response);

    return {
      ...state,
      response
    };
  } catch (error) {
    console.error("Error generating response:", error);
    return {
      ...state,
      error: error instanceof Error ? error : new Error(String(error))
    };
  }
}

/**
 * Create the error handling node
 */
export function handleError(state: AgentState): AgentState {
  console.error("Agent encountered an error:", state.error);

  return {
    ...state,
    response:
      "Desculpe, estou enfrentando algumas dificuldades t√©cnicas no momento. Poderia tentar novamente mais tarde?"
  };
}
